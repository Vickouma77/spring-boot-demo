@startuml
!define RECTANGLE class
!theme cloudscape-design

' Organize into top-level domains for clarity
package "Onboarding Service" {
    RECTANGLE Landlord {
        +deactivateAccount()
        +notifyManagers()
        +notifyTenants()
        +freezePortfolios()
        +removeLandlord()
    }

    RECTANGLE Manager {
        +deactivateAccount()
        +receiveNotification()
        +removeFromPortfolios()
    }

    RECTANGLE Portfolio {
        +removeManager(managerId)
        +freezeWorkOrders()
        +removeProperties()
        +notifyLandlords()
        +notifyTenants()
    }

    RECTANGLE Property {
        +remove()
    }
}

package "Services" {
    package "Notification Service" {
        RECTANGLE Notification {
            +sendNotification(to, message)
        }
    }

    package "Authorization Service" {
        RECTANGLE Auth {
            +authorizeUser(userId)
            +revokeAccess(userId)
        }
    }

    package "Billing Service" {
        RECTANGLE Billing {
            +closeBillingAccount(userId)
            +issueRefund(userId)
        }
    }

    package "Gateway Service" {
        RECTANGLE Gateway {
            +routeRequest()
            +validateRequest()
        }
    }
}

package "Data Layer" {
    RECTANGLE UserDB {
        +removeUser(userId)
    }

    RECTANGLE PortfolioDB {
        +removePortfolio(portfolioId)
    }

    RECTANGLE PropertyDB {
        +removeProperty(propertyId)
    }

    RECTANGLE NotificationDB {
        +logNotification(notificationId)
    }

    RECTANGLE AuthDB {
        +logAuthAttempt(userId)
        +revokeSession(sessionId)
    }

    RECTANGLE BillingDB {
        +logTransaction(transactionId)
        +removeBillingAccount(accountId)
    }
}

' Define relationships with clear directions
Landlord --> Portfolio : owns >
Portfolio --> Property : contains >
Portfolio --> Manager : manages >
Manager --> Portfolio : notifies >

' Notification relationships
Landlord --> Notification : uses >
Manager --> Notification : receives >

' Authorization relationships
Landlord --> Auth : requires authorization >
Manager --> Auth : verifies >

' Billing relationships
Landlord --> Billing : manages billing >
Billing --> Auth : validates identity >

' Gateway relationships
Gateway --> Notification : proxies >
Gateway --> Auth : validates sessions >
Gateway --> UserDB : accesses >
Gateway --> PortfolioDB : accesses >
Gateway --> PropertyDB : accesses >
Gateway --> NotificationDB : accesses >
Gateway --> AuthDB : logs >
Gateway --> BillingDB : retrieves >

@enduml
