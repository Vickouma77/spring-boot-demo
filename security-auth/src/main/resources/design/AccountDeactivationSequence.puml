@startuml
skinparam actorStyle awesome
skinparam participantPadding 20
skinparam participantBorderThickness 1
skinparam Boxpadding 20

actor Landlord
actor Manager
actor Tenant
participant "Onboarding Service" as OnboardingService
participant "Tenancy Service" as TenancyService
participant "Portfolio Service" as PortfolioService
participant "Notification Service" as NotificationService
participant "Authorization Service" as AuthorizationService
participant "Billing Service" as BillingService
participant "Gateway Service" as GatewayService
participant "Maintenance Service" as MaintenanceService

== Landlord Deactivation ==
Landlord -> GatewayService: Deactivation request
GatewayService -> AuthorizationService: Verify user identity
AuthorizationService --> GatewayService: Authorization confirmed
GatewayService -> OnboardingService: Process deactivation request

OnboardingService -> PortfolioService: Retrieve associated portfolios
alt No active portfolios exist
    OnboardingService -> PortfolioService: Check for rent-paying tenants and active work orders
    alt No tenants and no active work orders
        OnboardingService -> NotificationService: Notify landlord of deactivation
        NotificationService --> Landlord: Notify account deactivated
        OnboardingService -> AuthorizationService: Revoke landlord access
        AuthorizationService --> OnboardingService: Access revoked
        OnboardingService -> BillingService: Close billing accounts
        BillingService --> OnboardingService: Billing accounts closed
    else Rent-paying tenants or active work orders exist
        OnboardingService -> NotificationService: Warn landlord of constraints
        NotificationService --> Landlord: Notify account cannot be deactivated due to dependencies
    end
else Active portfolios exist
    OnboardingService -> NotificationService: Warn landlord of active portfolios
    NotificationService --> Landlord: Notify account cannot be deactivated due to active portfolios
    end

alt#red Failure at any step
    OnboardingService -> NotificationService: Notify landlord of failure
    NotificationService --> Landlord: Inform of failure and that account remains active
end

== Manager Deactivation ==
Manager -> GatewayService: Deactivation request
GatewayService -> AuthorizationService: Verify user identity
AuthorizationService --> GatewayService: Authorization confirmed
GatewayService -> OnboardingService: Process deactivation request

OnboardingService -> PortfolioService: Check manager's portfolio involvement

alt Manager not in any portfolio
    OnboardingService -> AuthorizationService: Revoke manager access
    AuthorizationService --> OnboardingService: Access revoked
    OnboardingService -> NotificationService: Notify manager of deactivation
    NotificationService --> Manager: Deactivation confirmed
else Manager in portfolio but no managed properties
    OnboardingService -> PortfolioService: Verify no managed properties
    alt No managed properties
        OnboardingService -> AuthorizationService: Revoke manager access
        AuthorizationService --> OnboardingService: Access revoked
        OnboardingService -> NotificationService: Notify manager of deactivation
        NotificationService --> Manager: Deactivation confirmed
    else Managed properties exist but none active
        OnboardingService -> PortfolioService: Mark properties as unmanaged
        PortfolioService --> OnboardingService: Properties marked unmanaged
        OnboardingService -> AuthorizationService: Revoke manager access
        AuthorizationService --> OnboardingService: Access revoked
        OnboardingService -> NotificationService: Notify manager of deactivation
        NotificationService --> Manager: Deactivation confirmed
    end
else Manager in portfolio with active properties
    OnboardingService -> PortfolioService: Check for active properties
    alt Active properties exist
        OnboardingService -> NotificationService: Notify manager of inability to deactivate
        NotificationService --> Manager: Deactivation request denied due to active properties
    else No active properties
        OnboardingService -> PortfolioService: Reassign or mark portfolios unmanaged
        PortfolioService --> OnboardingService: Portfolios reassigned or marked unmanaged
        OnboardingService -> AuthorizationService: Revoke manager access
        AuthorizationService --> OnboardingService: Access revoked
        OnboardingService -> NotificationService: Notify manager of deactivation
        NotificationService --> Manager: Deactivation confirmed
    end
end

alt#red Failure at any step
    OnboardingService -> NotificationService: Notify manager of failure
    NotificationService --> Manager: Inform of failure and that account remains active
end

== Tenant Deactivation ==
Tenant -> GatewayService: Deactivation request
GatewayService -> AuthorizationService: Verify user identity
AuthorizationService --> GatewayService: Authorization confirmed
GatewayService -> OnboardingService: Process deactivation request

OnboardingService -> TenancyService: Check active tenancy agreements
alt No active agreements
    TenancyService -> MaintenanceService: Check unresolved maintenance requests
    alt No unresolved maintenance requests
        TenancyService -> BillingService: Check pending payments
        alt No pending payments
            OnboardingService -> NotificationService: Notify tenant of deactivation
            NotificationService --> Tenant: Deactivation confirmed
            OnboardingService -> AuthorizationService: Revoke tenant access
            AuthorizationService --> OnboardingService: Access revoked
        else Pending payments exist
            OnboardingService -> NotificationService: Notify tenant of pending payments
            NotificationService --> Tenant: Inform pending payments block deactivation
        end
    else Unresolved maintenance requests exist
        OnboardingService -> NotificationService: Notify tenant of maintenance issues
        NotificationService --> Tenant: Inform unresolved maintenance requests block deactivation
    end
else Active tenancy agreements exist
    OnboardingService -> NotificationService: Notify tenant of active agreements
    NotificationService --> Tenant: Inform active agreements block deactivation
end

alt#red Failure at any step
    OnboardingService -> NotificationService: Notify tenant of failure
    NotificationService --> Tenant: Inform account remains active
end
@enduml
